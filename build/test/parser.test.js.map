{"version":3,"sources":["../../src/test/parser.test.js"],"names":["TEXT","describe","it","example","parser","vTree","toVTree","equal","children","tagName","_type","dText"],"mappings":";;AAAA;;AACA;;AACA;;;;;;AAEA,MAAM,EAAEA,IAAF,gBAAN;;AAEAC,SAAS,QAAT,EAAmB,MAAM;;AAEvBA,WAAS,UAAT,EAAqB,MAAM;;AAEzBC,OAAG,mBAAH,EAAwB,MAAM;AAC5B,YAAMC,UAAW;;;;;OAAjB;AAMA,YAAMC,SAAS,oBAAf;AACA,YAAMC,QAAQD,OAAOE,OAAP,CAAeH,OAAf,EAAwB,CAAxB,CAAd;;AAEA,uBAAOI,KAAP,CAAa,IAAb,EAAmBF,MAAMG,QAAN,CAAe,CAAf,EAAkBC,OAArC;AACA,uBAAOF,KAAP,CAAaP,IAAb,EAAmBK,MAAMG,QAAN,CAAe,CAAf,EAAkBA,QAAlB,CAA2B,CAA3B,EAA8BE,KAAjD;AACA,uBAAOH,KAAP,CAAa,SAAb,EAAwBF,MAAMG,QAAN,CAAe,CAAf,EAAkBA,QAAlB,CAA2B,CAA3B,EAA8BG,KAAtD;AACA,uBAAOJ,KAAP,CAAa,OAAb,EAAsBF,MAAMG,QAAN,CAAe,CAAf,EAAkBC,OAAxC;AACD,KAdD;AAeD,GAjBD;AAkBD,CApBD","file":"parser.test.js","sourcesContent":["import { Parser } from '../parser';\nimport { type } from '../lexer';\nimport assert from 'assert';\n\nconst { TEXT } = type;\n\ndescribe('Parser', () => {\n\n  describe('#toVTree', () => {\n\n    it('correct hierarchy', () => {\n      const example = `\n      <div id=\"app\" className=\"content\">\n        <h1 id=\"heading1\">{message}</h1>\n        <input type=\"text\" onSubmit={handler} />\n      </div>\n      `\n      const parser = new Parser();\n      const vTree = parser.toVTree(example)[0];\n\n      assert.equal('h1', vTree.children[0].tagName);\n      assert.equal(TEXT, vTree.children[0].children[0]._type);\n      assert.equal('message', vTree.children[0].children[0].dText);\n      assert.equal('input', vTree.children[1].tagName);\n    });\n  });\n})"]}