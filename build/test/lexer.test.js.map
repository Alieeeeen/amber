{"version":3,"sources":["../../src/test/lexer.test.js"],"names":["OPENNING","TEXT","CLOSING","SELFCLOSING","describe","it","example","scanner","token","getToken","equal","attrs","dAttrs","id","className","onSubmit","tagNames","i","tagName","text","dText"],"mappings":";;AAAA;;AACA;;;;;;AAEA,MAAM,EAAEA,QAAF,EAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,WAA3B,gBAAN;;AAEAC,SAAS,OAAT,EAAkB,MAAM;;AAEtBA,WAAS,WAAT,EAAsB,MAAM;AAC1BC,OAAI,wBAAJ,EAA6B,MAAM;AACjC,YAAMC,UAAW,OAAjB;AACA,YAAMC,UAAU,mBAAYD,OAAZ,CAAhB;;AAEA,UAAIE,QAAQD,QAAQE,QAAR,EAAZ;AACA,uBAAOC,KAAP,CAAa,KAAK,CAAlB,EAAqBF,MAAMG,KAA3B;AACA,uBAAOD,KAAP,CAAa,KAAK,CAAlB,EAAqBF,MAAMI,MAA3B;AACD,KAPD;;AASAP,OAAG,6BAAH,EAAkC,MAAM;AACtC,YAAMC,UAAW,oCAAjB;AACA,YAAMC,UAAU,mBAAYD,OAAZ,CAAhB;;AAEA,UAAIE,QAAQD,QAAQE,QAAR,EAAZ;AACA,uBAAOC,KAAP,CAAa,OAAb,EAAsBF,MAAMG,KAAN,CAAYE,EAAlC;AACA,uBAAOH,KAAP,CAAa,WAAb,EAA0BF,MAAMG,KAAN,CAAYG,SAAtC;AACD,KAPD;;AASAT,OAAG,8BAAH,EAAmC,MAAM;AACvC,YAAMC,UAAW,0CAAjB;AACA,YAAMC,UAAU,mBAAYD,OAAZ,CAAhB;;AAEA,UAAIE,QAAQD,QAAQE,QAAR,EAAZ;AACA,uBAAOC,KAAP,CAAa,SAAb,EAAwBF,MAAMI,MAAN,CAAaG,QAArC;AACD,KAND;;AAQAV,OAAG,yBAAH,EAA8B,MAAM;AAClC,YAAMC,UAAW;;;;OAAjB;AAKA,YAAMC,UAAU,mBAAYD,OAAZ,CAAhB;AACA,YAAMU,WAAW,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,KAApB,CAAjB;;AAEA,UAAIR,QAAQD,QAAQE,QAAR,EAAZ;AAAA,UAAgCQ,IAAI,CAApC;AACA,aAAMT,KAAN,EAAa;AACX,YAAIA,MAAMU,OAAV,EACEV,MAAMU,OAAN,KAAkBF,SAASC,GAAT,CAAlB;;AAEF,YAAIT,MAAMW,IAAV,EACEX,MAAMW,IAAN,KAAe,OAAf;;AAEF,YAAIX,MAAMY,KAAV,EACEZ,MAAMY,KAAN,KAAgB,SAAhB;AACH;AACF,KApBD;AAqBD,GAhDD;AAiDD,CAnDD","file":"lexer.test.js","sourcesContent":["import { type, Scanner } from '../lexer';\nimport assert from 'assert';\n\nconst { OPENNING, TEXT, CLOSING, SELFCLOSING } = type;\n\ndescribe('Lexer', () => {\n\n  describe('#getToken', () => {\n    it(`tags with no attribute`, () => {\n      const example = `<div>`;\n      const scanner = new Scanner(example);\n      \n      let token = scanner.getToken();\n      assert.equal(void 0, token.attrs);\n      assert.equal(void 0, token.dAttrs);\n    });\n\n    it('tags with static attributes', () => {\n      const example = `<div id=\"app\" className=\"content\">`;\n      const scanner = new Scanner(example);\n\n      let token = scanner.getToken();\n      assert.equal('\"app\"', token.attrs.id);\n      assert.equal('\"content\"', token.attrs.className);\n    });\n\n    it('tags with dynamic attributes', () => {\n      const example = `<input type=\"text\" onSubmit={handler} />`;\n      const scanner = new Scanner(example);\n\n      let token = scanner.getToken();\n      assert.equal('handler', token.dAttrs.onSubmit);\n    });\n\n    it('works sequentially fine', () => {\n      const example = `\n      <div>\n        <h1>Hello { message }</h1>\n      </div>\n      `;\n      const scanner = new Scanner(example);\n      const tagNames = ['div', 'h1', 'h1', 'div'];\n\n      let token = scanner.getToken(), i = 0;\n      while(token) {\n        if (token.tagName)\n          token.tagName === tagNames[i++];\n\n        if (token.text)\n          token.text === 'Hello';\n\n        if (token.dText)\n          token.dText === 'message';\n      }\n    })\n  });\n});"]}