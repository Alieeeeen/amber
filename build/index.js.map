{"version":3,"sources":["../src/index.js"],"names":["relativePathRe","jsFile","AmberJSX","transpile","sourcePath","destPath","originalSourcePath","test","__dirname","replace","startsWith","Error","split","readFile","err","code","console","log","transpiled","write","writeFile","toVTree","parser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,MAAMA,iBAAiB,SAAvB;AACA,MAAMC,SAAS,2BAAf;;AAEO,MAAMC,8BAAW;AACtB;;;;;AAKAC,YAAUC,UAAV,EAAsBC,QAAtB,EAAgC;AAC9B;AACA,QAAIC,qBAAqBF,UAAzB;AACA;AACA,QAAIJ,eAAeO,IAAf,CAAoBH,UAApB,CAAJ,EAAqC;AACnCA,mBAAaI,YAAY,MAAZ,GAAqBJ,WAAWK,OAAX,CAAmBT,cAAnB,EAAmC,EAAnC,CAAlC;AACD,KAFD,MAEO,IAAI,CAACI,WAAWM,UAAX,CAAsB,GAAtB,CAAL,EAAiC;AACtCN,mBAAaI,YAAY,MAAZ,GAAqBJ,UAAlC;AACD;;AAED,QAAI,CAACH,OAAOM,IAAP,CAAYH,UAAZ,CAAL,EAA8B;AAC5B,YAAM,IAAIO,KAAJ,CAAW,wBAAuBP,UAAW,IAA7C,CAAN;AACD;;AAEDC,eAAWA,YAAaD,WAAWQ,KAAX,CAAiB,aAAjB,EAAgC,CAAhC,IAAqC,cAA7D;;AAEA,iBAAGC,QAAH,CAAYT,UAAZ,EAAwB,OAAxB,EAAiC,CAACU,GAAD,EAAMC,IAAN,KAAe;AAC9C,UAAID,GAAJ,EAAS;AACPE,gBAAQC,GAAR,CAAYH,GAAZ;AACA;AACD;AACD,YAAMI,aAAa,mBAAWH,IAAX,EAAiBI,KAAjB,EAAnB;AACA,mBAAGC,SAAH,CAAaf,QAAb,EAAuBa,UAAvB,EAAmC,MAAM;AACvCF,gBAAQC,GAAR,CAAa,6BAA4BX,kBAAmB,KAA5D;AACAU,gBAAQC,GAAR,CAAY,yBAAZ;AACD,OAHD;AAID,KAVD;AAWD,GAjCqB;;AAmCtBI,UAAQN,IAAR,EAAc;AACZ,QAAI,OAAOA,IAAP,KAAgB,QAApB,EACE,MAAM,IAAIJ,KAAJ,CAAU,sCAAV,CAAN;;AAEF,UAAMW,SAAS,oBAAf;AACA,WAAOA,OAAOD,OAAP,CAAeN,IAAf,CAAP;AACD;AAzCqB,CAAjB","file":"index.js","sourcesContent":["import { Writer } from './writer';\nimport { Parser } from './parser';\nimport fs from 'fs';\n\nconst relativePathRe = /^(\\.)\\//;\nconst jsFile = /([^\\/\\s*]*)\\.(jsx|js)\\s*$/;\n\nexport const AmberJSX = {\n  /**\n   * Transpile file\n   * @param {String} sourcePath source path\n   * @param {String} destPath optional destination path.\n   */\n  transpile(sourcePath, destPath) {\n    // Save original value.\n    var originalSourcePath = sourcePath;\n    // convert relative path to absolute path.\n    if (relativePathRe.test(sourcePath)) {\n      sourcePath = __dirname + '/../' + sourcePath.replace(relativePathRe, '');\n    } else if (!sourcePath.startsWith('/')) {\n      sourcePath = __dirname + '/../' + sourcePath;\n    }\n\n    if (!jsFile.test(sourcePath)) {\n      throw new Error(`Unrecognizable file: ${sourcePath}. `);\n    }\n\n    destPath = destPath || (sourcePath.split(/\\.(jsx|js)$/)[0] + '.compiled.js');\n\n    fs.readFile(sourcePath, 'utf-8', (err, code) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n      const transpiled = new Writer(code).write();\n      fs.writeFile(destPath, transpiled, () => {\n        console.log(`\\n> AmberJSX: transpiling ${originalSourcePath}...`);\n        console.log('> AmberJSX: finished.\\n');\n      })\n    });\n  },\n\n  toVTree(code) {\n    if (typeof code !== 'string')\n      throw new Error('Param to `toVTree` must be a string!');\n\n    const parser = new Parser();\n    return parser.toVTree(code);\n  }\n};\n"]}