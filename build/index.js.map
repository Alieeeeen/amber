{"version":3,"sources":["../src/index.js"],"names":["relativeStriper","nameStriper","AmberJSX","transpile","sourcePath","destPath","originalSourcePath","startsWith","__dirname","replace","test","Error","match","readFile","err","code","console","log","transpiled","write","writeFile","toVTree","parser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,MAAMA,kBAAkB,gBAAxB;AACA,MAAMC,cAAc,2BAApB;;AAEO,MAAMC,8BAAW;AACtB;;;;;AAKAC,YAAUC,UAAV,EAAsBC,QAAtB,EAAgC;AAC9B,QAAIC,qBAAqBF,UAAzB;AACA;AACA,QAAIA,WAAWG,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;AAC/BH,mBAAaI,YAAYJ,WAAWK,OAAX,CAAmBT,eAAnB,EAAoC,EAApC,CAAzB;AACD;;AAED,QAAI,CAACC,YAAYS,IAAZ,CAAiBN,UAAjB,CAAL,EAAmC;AACjC,YAAM,IAAIO,KAAJ,CAAW,wBAAuBP,UAAW,IAA7C,CAAN;AACD;;AAEDC,eAAWA,YAAaD,WAAWQ,KAAX,CAAiBR,UAAjB,EAA6B,CAA7B,IAAkC,cAA1D;;AAEA,iBAAGS,QAAH,CAAYT,UAAZ,EAAwB,OAAxB,EAAiC,CAACU,GAAD,EAAMC,IAAN,KAAe;AAC9C,UAAID,GAAJ,EAAS;AACPE,gBAAQC,GAAR,CAAYH,GAAZ;AACA;AACD;AACD,YAAMI,aAAa,mBAAWH,IAAX,EAAiBI,KAAjB,EAAnB;AACA,mBAAGC,SAAH,CAAaf,QAAb,EAAuBa,UAAvB,EAAmC,MAAM;AACvCF,gBAAQC,GAAR,CAAa,6BAA4BX,kBAAmB,KAA5D;AACAU,gBAAQC,GAAR,CAAY,yBAAZ;AACD,OAHD;AAID,KAVD;AAWD,GA9BqB;;AAgCtBI,UAAQN,IAAR,EAAc;AACZ,QAAI,OAAOA,IAAP,KAAgB,QAApB,EACE,MAAM,IAAIJ,KAAJ,CAAU,sCAAV,CAAN;;AAEF,UAAMW,SAAS,oBAAf;AACA,WAAOA,OAAOD,OAAP,CAAeN,IAAf,CAAP;AACD;AAtCqB,CAAjB","file":"index.js","sourcesContent":["import { Writer } from './writer';\nimport { Parser } from './parser';\nimport fs from 'fs';\n\nconst relativeStriper = /^(\\.\\/)|(\\/)*$/;\nconst nameStriper = /([^\\/\\s*]*)\\.(jsx|js)\\s*$/;\n\nexport const AmberJSX = {\n  /**\n   * Transpile file\n   * @param {String} sourcePath source path\n   * @param {String} destPath optional destination path.\n   */\n  transpile(sourcePath, destPath) {\n    var originalSourcePath = sourcePath;\n    // relative path.\n    if (sourcePath.startsWith('./')) {\n      sourcePath = __dirname + sourcePath.replace(relativeStriper, '');\n    }\n\n    if (!nameStriper.test(sourcePath)) {\n      throw new Error(`Unrecognizable file: ${sourcePath}. `);\n    }\n\n    destPath = destPath || (sourcePath.match(sourcePath)[1] + '.compiled.js');\n\n    fs.readFile(sourcePath, 'utf-8', (err, code) => {\n      if (err) {\n        console.log(err);\n        return;\n      }\n      const transpiled = new Writer(code).write();\n      fs.writeFile(destPath, transpiled, () => {\n        console.log(`\\n> AmberJSX: transpiling ${originalSourcePath}...`);\n        console.log('> AmberJSX: finished.\\n');\n      })\n    });\n  },\n\n  toVTree(code) {\n    if (typeof code !== 'string')\n      throw new Error('Param to `toVTree` must be a string!');\n\n    const parser = new Parser();\n    return parser.toVTree(code);\n  }\n};\n"]}